#!/bin/bash

# == SET VARIABLES ==
API=https://api.football-data.org/v2
API_KEY="X-Auth-Token: $(cat $HOME/.config/footy/api-key.txt)"
FOOTY=$(basename "$0")
USAGE="$FOOTY [-s <league> | -m <+/-days> | -l <league> | -t <team> | -I | -i <league> | -r | -k <api-key> | -h]"

# == FUNCTIONS FOR OPTIONS ==
usage()
{
	cat <<-EOF >&2
	Error: $1
	Usage: $USAGE
	Try '$FOOTY -h' for more information
	EOF
	exit 1
}

options()
{
	cat <<-EOF
	Usage: $FOOTY OPTIONS
	OPTIONS:
	  -s <league>   Prints standings in league (use league's code or id)
	  -m <+/-days>  Prints upcoming ('+' prefix) or previous ('-' prefix) matches 
	                Must be used with either -l <league> or -t <team>
	  -l <league>   Specifies league (use league's code or id)
	  -t <team>     Specifies team (must use team's id)
	  -I            Prints all supported leagues
	  -i <league>   Prints all teams in league (use league's code or id)
	  -r            Unformatted output for piping to other tools
	  -k <api-key>  Saves the api-key to $HOME/.config/footy/api-key.txt
	  -h            Prints this help message
	EOF
	exit 0
}

set_key()
{
	mkdir -p $HOME/.config/footy
	echo "${OPTARG}" > $HOME/.config/footy/api-key.txt
	exit 0
}

api_call()
{
	JSON=$(curl -sH "$API_KEY" $API/$1)
	ERROR=$(echo "$JSON" | jq -r 'if .message != null then .message else "false" end')
	if [ "$ERROR" != "false" ]; then
		1>&2 echo "$ERROR"; exit 1
	fi
}

leagues()
{
	api_call competitions
	[ $? -eq 1 ] && exit 1
	OUT=$(echo "$JSON" | \
		jq -r '.competitions[] | "\(.area.name),\(.name),\(.code),\(.id),\(.plan)"' | \
		awk '{ $3 = ($3 == "null" ? "" : $3); $6 = ($5 == "TIER_ONE" ? "Free" : "") } 1' FS="," OFS="," | \
		cat <(echo "Area,Name,Code,Id,Plan,Price") - | \
		cut -d ',' -f 1-4,6)
}

teams()
{
	api_call competitions/$1/teams
	[ $? -eq 1 ] && exit 1
	OUT=$(echo "$JSON" | \
		jq -r '.teams[] | "\(.name),\(.tla),\(.id)"' | \
		awk '{ $2 = ($2 == "null" ? "" : $2) } 1' FS="," OFS="," | \
		cat <(echo "Name,Code,Id") -)
}

standings()
{
	api_call competitions/$1/standings
	[ $? -eq 1 ] && exit 1
	OUT=$(echo "$JSON" | \
		jq -r '.standings[0].table[] | "\(.position),\(.team.name),\(.playedGames),\(.won),\(.draw),\(.lost),\(.points)"' | \
		cat <(echo "Pos,Team,P,W,D,L,Pts") -)
}

matches_league()
{
	api_call competitions/$1/matches\?dateFrom=$2\&dateTo=$3
	[ $? -eq 1 ] && exit 1
	OUT=$(echo "$JSON" | \
		jq -r '.matches[] | "\(.utcDate),\(.homeTeam.name),\(.awayTeam.name),\(.score.fullTime.homeTeam):\(.score.fullTime.awayTeam)"' | \
		awk '{ $4 = ($4 == "null:null" ? "-:-" : $4) } 1' FS="," OFS="," | \
		cat <(echo "Date,Home,Away,Score") -)
}

matches_team()
{
	api_call teams/$1/matches\?dateFrom=$2\&dateTo=$3
	[ $? -eq 1 ] && exit 1
	OUT=$(echo "$JSON" | \
		jq -r '.matches[] | "\(.utcDate),\(.homeTeam.name),\(.awayTeam.name),\(.score.fullTime.homeTeam):\(.score.fullTime.awayTeam)"' | \
		awk '{ $4 = ($4 == "null:null" ? "-:-" : $4) } 1' FS="," OFS="," | \
		cat <(echo "Date,Home,Away,Score") -)
}

# == PROCESS OPTIONS ==
INFO_LEAGUES=false
RAW=false
NOP=false
while getopts ":hk:s:m:l:t:rIi:" opt; do
	case "${opt}" in
		h)
			options
			;;
		k)
			set_key
			;;
		s)
			STANDINGS=${OPTARG}
			;;
		m)
			MATCHES_DAYS=${OPTARG}
			;;
		l)
			LEAGUE=${OPTARG}
			;;
		t)
			TEAM=${OPTARG}
			;;
		r)
			RAW=true
			;;
		I)
			INFO_LEAGUES=true
			;;
		i)
			INFO_TEAMS=${OPTARG}
			;;
		*)
			usage "Unknown or incomplete option"
			;;
	esac
done

# == CALL FUNCTIONS ==
if $INFO_LEAGUES; then
	leagues
elif [ -n "$INFO_TEAMS" ]; then
	teams $INFO_TEAMS
elif [ -n "$STANDINGS" ]; then
	standings $STANDINGS
elif [ -n "$MATCHES_DAYS" ]; then
	TODAY=$(date +"%Y-%m-%d")
	DAYS=$(echo "$MATCHES_DAYS" | cut -c 2-)
	case "$(echo "$MATCHES_DAYS" | cut -c -1)" in
		-)
			DATE_FROM=$(date -d "$date -$DAYS days" +"%Y-%m-%d")
			DATE_TO=$TODAY
			;;
		+)
			DATE_FROM=$TODAY
			DATE_TO=$(date -d "$date +$DAYS days" +"%Y-%m-%d")
			;;
		*)
			usage "Invalid days format"
			;;
	esac

	if [[ -n "$LEAGUE" && -n "$TEAM" || -z "$LEAGUE" && -z "$TEAM" ]]; then
		usage "To use the -m option, you must also use -l or -t to specify a league or team"
	else
		if [ -n "$LEAGUE" ]; then
			matches_league $LEAGUE $DATE_FROM $DATE_TO
		elif [ -n "$TEAM" ]; then
			matches_team $TEAM $DATE_FROM $DATE_TO
		fi
		$RAW || OUT=$(echo "$OUT" | awk '{ if (NR!=1) { "date -d "$1" +\"%d %b %H:%M\" | tr -d \"\n\"" | getline date; $1 = date } } 1' FS="," OFS=",")
	fi
else
	NOP=true
fi

$NOP && usage "Invalid options" || 
	$RAW && echo "$OUT" || echo "$OUT" | column -ts ','
