#!/bin/bash

# == SET VARIABLES ==
API=https://api.football-data.org/v2
API_KEY="X-Auth-Token: $(cat $HOME/.config/footy/api-key.txt)"
FOOTY=$(basename "$0")
FOOTY_FULL="$0"
USAGE="$FOOTY [-s <league> | -l | -t <league> | -k <api-key> | -h]"

# == FUNCTIONS FOR OPTIONS ==
usage()
{
	cat <<-EOF >&2
	Usage: $USAGE
	Try '$FOOTY -h' for more information.
	EOF
	exit 1
}

shorthelp()
{
	cat <<-EOF
	Usage: $USAGE
	-s <league>         Prints standings in a league (use league's code or id).
	-m <+days>|<-days>  Prints upcoming ('+' prefix) or previous ('-' prefix) matches.
	-l                  Prints all supported leagues.
	-t <league>         Prints all teams in a league (use league's code or id).
	-k <api-key>        Saves the api-key to $HOME/.config/footy/api-key.txt
	-h                  Prints this user documentation.
	EOF
	exit 0
}

set_key()
{
	mkdir -p $HOME/.config/footy
	echo "${OPTARG}" > $HOME/.config/footy/api-key.txt
	exit 0
}

api_call()
{
	JSON=$(curl -sH "$API_KEY" $API/$1)
	ERROR=$(echo "$JSON" | jq -r 'if .message != null then .message else "false" end')
	if [ "$ERROR" = "false" ]; then
		echo "$JSON"
	else
		echo "$ERROR"
		exit 1
	fi
}

leagues()
{
	JSON=$(api_call competitions)
	if [ $? -eq 0 ]; then
		echo "$JSON" | \
			jq -r '.competitions[] | "\(.area.name),\(.name),\(.code),\(.id),\(.plan)"' | \
			awk '{ $3 = ($3 == "null" ? "" : $3); $6 = ($5 == "TIER_ONE" ? "Free" : "") } 1' FS="," OFS="," | \
			cat <(echo "Area,Name,Code,Id,Plan,Price") - | \
			cut -d ',' -f 1-4,6 | \
			column -ts ','
	else
		1>&2 echo "$JSON"
	fi
	exit 0
}

teams()
{
	COMPETITION=${OPTARG}
	JSON=$(api_call competitions/$COMPETITION/teams)
	if [ $? -eq 0 ]; then
		echo "$JSON" | \
			jq -r '.teams[] | "\(.name),\(.tla),\(.id)"' | \
			awk '{ $2 = ($2 == "null" ? "" : $2) } 1' FS="," OFS="," | \
			cat <(echo "Name,Code,Id") - | \
			column -ts ","
	else
		1>&2 echo "$JSON"
	fi
	exit 0
}

standings()
{
	COMPETITION=${OPTARG}
	JSON=$(api_call competitions/$COMPETITION/standings)
	if [ $? -eq 0 ]; then
		echo "$JSON" | \
			jq -r '.standings[0].table[] | "\(.position),\(.team.name),\(.playedGames),\(.won),\(.draw),\(.lost),\(.points)"' | \
			cat <(echo "Pos,Team,P,W,D,L,Pts") - | \
			column -ts ","
	else
		1>&2 echo "$JSON"
	fi
	exit 0
}

matches()
{
	# TODO: add support for teams as well
	# TODO: format date
	COMPETITION=BL1
	SIGN=$(echo "${OPTARG}" | cut -c -1)
	DAYS=$(echo "${OPTARG}" | cut -c 2-)
	TODAY=$(date +"%Y-%m-%d")
	if [ $SIGN = "-" ]; then
		DATE_FROM=$(date -d "$date -$DAYS days" +"%Y-%m-%d")
		DATE_TO=$TODAY
	elif [ $SIGN = "+" ]; then
		DATE_FROM=$TODAY
		DATE_TO=$(date -d "$date +$DAYS days" +"%Y-%m-%d")
	else
		usage
		exit 1
	fi

	curl -sH "$API_KEY" $API/competitions/$COMPETITION/matches\?dateFrom=$DATE_FROM\&dateTo=$DATE_TO | \
		jq -r '.matches[] | "\(.utcDate),\(.homeTeam.name),\(.awayTeam.name),\(.score.fullTime.homeTeam):\(.score.fullTime.awayTeam)"' | \
		awk '{ $4 = ($4 == "null:null" ? "-:-" : $4) } 1' FS="," OFS="," | \
		# awk '{ $1 = $(date -d $1 +"%d %b %H:%M"); $4 = ($4 == "null:null" ? "-:-" : $4) } 1' FS="," OFS="," | \
		column -ts "," -N Date,Home,Away,Score
	exit 0
}

# == PROCESS OPTIONS ==
while getopts ":hk:lt:s:m:" opt; do
	case "${opt}" in
		h)
			shorthelp
			;;
		k)
			set_key
			;;
		l)
			leagues
			;;
		t)
			teams
			;;
		s)
			standings
			;;
		m)
			matches
			;;
		*)
			usage
			;;
	esac
done

usage
